export const reactjsQuestionsData = [
    {
      id: 0,
      question: "What is the command to create a new React app?",
      description: null,
      answers: {
        a: "npx create-react-app my-app",
        b: "npm install react",
        c: "react-new-app",
        d: "npm create react-app",
      },
      correct_answer: "a",
      explanation: "Use `npx create-react-app my-app` to create a new React project.",
      difficulty: "Easy",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 1,
      question: "What is JSX?",
      description: null,
      answers: {
        a: "A JavaScript syntax extension",
        b: "A CSS preprocessor",
        c: "A database language",
        d: "A type of API",
      },
      correct_answer: "a",
      explanation: "JSX is a syntax extension that allows writing HTML-like code inside JavaScript.",
      difficulty: "Easy",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 2,
      question: "Which method is used to update the state in a class component?",
      description: null,
      answers: {
        a: "updateState()",
        b: "changeState()",
        c: "this.setState()",
        d: "setState()",
      },
      correct_answer: "c",
      explanation: "`this.setState()` is used to update state in class components.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 3,
      question: "What hook is used to manage state in a functional component?",
      description: null,
      answers: {
        a: "useEffect",
        b: "useState",
        c: "useReducer",
        d: "useContext",
      },
      correct_answer: "b",
      explanation: "`useState` is the hook for managing state inside functional components.",
      difficulty: "Easy",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 4,
      question: "Which hook is used for side effects in React?",
      description: null,
      answers: {
        a: "useRef",
        b: "useState",
        c: "useEffect",
        d: "useMemo",
      },
      correct_answer: "c",
      explanation: "`useEffect` handles side effects like API calls or subscriptions.",
      difficulty: "Easy",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 5,
      question: "What is the virtual DOM?",
      description: null,
      answers: {
        a: "A backup of the real DOM",
        b: "A lightweight JavaScript representation of the DOM",
        c: "The same as the real DOM",
        d: "A type of database",
      },
      correct_answer: "b",
      explanation: "The virtual DOM is a lightweight copy of the real DOM used to optimize updates.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 6,
      question: "Which of the following is a correct way to pass props to a component?",
      description: null,
      answers: {
        a: "<Component props='value' />",
        b: "<Component propName='value' />",
        c: "<Component:propName='value' />",
        d: "<Component.propName='value' />",
      },
      correct_answer: "b",
      explanation: "Props are passed using attribute syntax like `<Component propName='value' />`.",
      difficulty: "Easy",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 7,
      question: "How do you lift state up in React?",
      description: null,
      answers: {
        a: "Move state to a child component",
        b: "Move state to a parent component",
        c: "Create a new context",
        d: "Use Redux",
      },
      correct_answer: "b",
      explanation: "Lifting state up means moving state to a common parent component.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 8,
      question: "What does the useContext hook do?",
      description: null,
      answers: {
        a: "Manages state locally",
        b: "Allows consuming context values",
        c: "Performs side effects",
        d: "Provides routing functionality",
      },
      correct_answer: "b",
      explanation: "`useContext` allows you to consume a React context in a functional component.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 9,
      question: "Which lifecycle method is called after a component is rendered?",
      description: null,
      answers: {
        a: "componentDidMount",
        b: "componentWillMount",
        c: "render",
        d: "shouldComponentUpdate",
      },
      correct_answer: "a",
      explanation: "`componentDidMount` is invoked after the component is mounted and rendered.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 10,
      question: "Which library is commonly used for routing in React apps?",
      description: null,
      answers: {
        a: "React Router",
        b: "React Navigation",
        c: "React Paths",
        d: "React Routes",
      },
      correct_answer: "a",
      explanation: "`React Router` is the standard library for handling routing in React.",
      difficulty: "Easy",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 11,
      question: "What is Redux primarily used for in React apps?",
      description: null,
      answers: {
        a: "Routing",
        b: "API calls",
        c: "State management",
        d: "Component styling",
      },
      correct_answer: "c",
      explanation: "Redux is used for centralized state management.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 12,
      question: "What does the key prop help React identify?",
      description: null,
      answers: {
        a: "Unique list items",
        b: "State changes",
        c: "API endpoints",
        d: "Component styles",
      },
      correct_answer: "a",
      explanation: "`key` helps React identify which items have changed, been added, or removed.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 13,
      question: "Which hook is used to reference a DOM node directly?",
      description: null,
      answers: {
        a: "useEffect",
        b: "useRef",
        c: "useState",
        d: "useMemo",
      },
      correct_answer: "b",
      explanation: "`useRef` provides a way to reference and manipulate a DOM node directly.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 14,
      question: "What is the default behavior of forms in React?",
      description: null,
      answers: {
        a: "To automatically bind values",
        b: "To auto-submit",
        c: "To refresh the page",
        d: "To prevent page reload",
      },
      correct_answer: "c",
      explanation: "By default, form submission in React causes a page reload unless prevented.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 15,
      question: "How do you prevent default form behavior in React?",
      description: null,
      answers: {
        a: "e.preventSubmit()",
        b: "e.preventDefault()",
        c: "e.stopDefault()",
        d: "e.stopSubmit()",
      },
      correct_answer: "b",
      explanation: "`e.preventDefault()` is used to prevent the default form submission behavior.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 16,
      question: "Which hook optimizes performance by memoizing a value?",
      description: null,
      answers: {
        a: "useMemo",
        b: "useCallback",
        c: "useReducer",
        d: "useRef",
      },
      correct_answer: "a",
      explanation: "`useMemo` memoizes a computed value to optimize performance.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 17,
      question: "What does useCallback return?",
      description: null,
      answers: {
        a: "A memoized function",
        b: "A memoized value",
        c: "A context",
        d: "A reducer",
      },
      correct_answer: "a",
      explanation: "`useCallback` returns a memoized callback function.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 18,
      question: "Which syntax is used for a fragment in React?",
      description: null,
      answers: {
        a: "<Fragment></Fragment>",
        b: "<></>",
        c: "<fragment></fragment>",
        d: "<Frag></Frag>",
      },
      correct_answer: "b",
      explanation: "`<>...</>` is shorthand syntax for React Fragments.",
      difficulty: "Easy",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
      id: 19,
      question: "Which file typically contains all routes in a React app?",
      description: null,
      answers: {
        a: "App.js",
        b: "index.js",
        c: "routes.js",
        d: "navigation.js",
      },
      correct_answer: "c",
      explanation: "`routes.js` often contains route definitions in organized projects.",
      difficulty: "Medium",
      category: "ReactJS",
      multiple_correct: false,
    },
    {
        id: 20,
        question: "Which command is used to start a React development server?",
        description: null,
        answers: {
          a: "npm start",
          b: "npm run build",
          c: "npm install",
          d: "npm run dev-server",
        },
        correct_answer: "a",
        explanation: "`npm start` runs the React development server.",
        difficulty: "Easy",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 21,
        question: "Which hook is best for managing complex state logic in React?",
        description: null,
        answers: {
          a: "useState",
          b: "useEffect",
          c: "useReducer",
          d: "useContext",
        },
        correct_answer: "c",
        explanation: "`useReducer` is used to manage complex state logic in React functional components.",
        difficulty: "Medium",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 22,
        question: "What will happen if a component's key changes in a list?",
        description: null,
        answers: {
          a: "It will be re-rendered from scratch",
          b: "It will be ignored",
          c: "It will throw an error",
          d: "It will crash the app",
        },
        correct_answer: "a",
        explanation: "Changing a key causes React to treat it as a new component and re-render it from scratch.",
        difficulty: "Medium",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 23,
        question: "Which of these is NOT a controlled component in React?",
        description: null,
        answers: {
          a: "<input />",
          b: "<textarea />",
          c: "<select />",
          d: "<div />",
        },
        correct_answer: "d",
        explanation: "Elements like `<div>` are not form elements and are not controlled components.",
        difficulty: "Easy",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 24,
        question: "Which hook is used to perform an action after the first render only?",
        description: null,
        answers: {
          a: "useMemo",
          b: "useEffect with empty dependency array",
          c: "useState",
          d: "useRef",
        },
        correct_answer: "b",
        explanation: "Passing an empty dependency array `[]` to `useEffect` runs it only after the first render.",
        difficulty: "Medium",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 25,
        question: "What happens when you update state in React?",
        description: null,
        answers: {
          a: "Only the updated DOM node is replaced",
          b: "The whole page reloads",
          c: "The entire component re-renders",
          d: "State changes directly in the DOM",
        },
        correct_answer: "c",
        explanation: "State updates cause the component to re-render, allowing React to reconcile changes.",
        difficulty: "Medium",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 26,
        question: "In React, props are ____",
        description: null,
        answers: {
          a: "Mutable",
          b: "Immutable",
          c: "Both mutable and immutable",
          d: "Optional",
        },
        correct_answer: "b",
        explanation: "Props are immutable, meaning they cannot be changed after being passed to a component.",
        difficulty: "Easy",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 27,
        question: "What does React.StrictMode help with?",
        description: null,
        answers: {
          a: "Adds more CSS styling",
          b: "Catches potential problems early",
          c: "Improves performance instantly",
          d: "Increases server-side rendering speed",
        },
        correct_answer: "b",
        explanation: "`React.StrictMode` helps highlight potential problems during development.",
        difficulty: "Medium",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 28,
        question: "Which function is used to lazy load a component in React?",
        description: null,
        answers: {
          a: "React.load()",
          b: "React.lazy()",
          c: "React.defer()",
          d: "React.async()",
        },
        correct_answer: "b",
        explanation: "`React.lazy()` is used to dynamically import and lazy-load components.",
        difficulty: "Medium",
        category: "ReactJS",
        multiple_correct: false,
      },
      {
        id: 29,
        question: "Which package helps in code splitting React apps for optimization?",
        description: null,
        answers: {
          a: "react-router",
          b: "react-split",
          c: "react-loadable",
          d: "react-optimizer",
        },
        correct_answer: "c",
        explanation: "`react-loadable` helps with code splitting and lazy loading of React components.",
        difficulty: "Hard",
        category: "ReactJS",
        multiple_correct: false,
      }
    
  
    // (20 to 29 will continue if you say "yes continue")
  ];
  