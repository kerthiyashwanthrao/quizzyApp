export const reduxQuestionsData = [
    {
      id: 0,
      question: "What is the primary purpose of Redux?",
      description: null,
      answers: {
        a: "To style components",
        b: "To manage component lifecycles",
        c: "To manage application state centrally",
        d: "To route between pages",
      },
      correct_answer: "c",
      explanation: "Redux provides a centralized store to manage application state in a predictable way.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 1,
      question: "What is a Redux store?",
      description: null,
      answers: {
        a: "A place to write logs",
        b: "A centralized container that holds application state",
        c: "A styling manager",
        d: "A router component",
      },
      correct_answer: "b",
      explanation: "A Redux store is the central place that holds the entire application's state.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 2,
      question: "Which method is used to send data to the Redux store?",
      description: null,
      answers: {
        a: "dispatch()",
        b: "commit()",
        c: "send()",
        d: "emit()",
      },
      correct_answer: "a",
      explanation: "`dispatch()` is used to send actions to the Redux store.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 3,
      question: "What is a reducer in Redux?",
      description: null,
      answers: {
        a: "A function that reduces the bundle size",
        b: "A middleware function",
        c: "A function that determines state changes",
        d: "A component in React",
      },
      correct_answer: "c",
      explanation: "A reducer is a pure function that takes current state and action, and returns new state.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 4,
      question: "Which statement about reducers is true?",
      description: null,
      answers: {
        a: "Reducers mutate state directly",
        b: "Reducers must be async",
        c: "Reducers return new state based on action type",
        d: "Reducers are not functions",
      },
      correct_answer: "c",
      explanation: "Reducers must return new state objects based on the action dispatched.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 5,
      question: "What are Redux actions?",
      description: null,
      answers: {
        a: "Functions that render UI",
        b: "Components that connect to the store",
        c: "Plain objects describing state changes",
        d: "Event listeners",
      },
      correct_answer: "c",
      explanation: "Actions are plain JavaScript objects that describe a change in the state.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 6,
      question: "Which property is mandatory in every Redux action?",
      description: null,
      answers: {
        a: "payload",
        b: "data",
        c: "meta",
        d: "type",
      },
      correct_answer: "d",
      explanation: "Every action must have a `type` property to indicate the action to perform.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 7,
      question: "What is `combineReducers` used for?",
      description: null,
      answers: {
        a: "To combine multiple stores",
        b: "To split state into slices",
        c: "To combine multiple reducers into one",
        d: "To connect components to store",
      },
      correct_answer: "c",
      explanation: "`combineReducers` merges multiple reducer functions into a single reducer function.",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 8,
      question: "What does `useSelector` do in React-Redux?",
      description: null,
      answers: {
        a: "Dispatches an action",
        b: "Returns the reducer",
        c: "Extracts state from the Redux store",
        d: "Creates a new reducer",
      },
      correct_answer: "c",
      explanation: "`useSelector` allows a component to access data from the Redux store.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 9,
      question: "What is the purpose of `useDispatch` in React-Redux?",
      description: null,
      answers: {
        a: "To send actions to the reducer",
        b: "To access state directly",
        c: "To replace the reducer",
        d: "To combine multiple stores",
      },
      correct_answer: "a",
      explanation: "`useDispatch` gives you access to the store’s dispatch function for sending actions.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 10,
      question: "What kind of function should a reducer be?",
      description: null,
      answers: {
        a: "Async function",
        b: "Pure function",
        c: "Class-based function",
        d: "Promise-based function",
      },
      correct_answer: "b",
      explanation: "Reducers must be pure functions to ensure predictability and easy testing.",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 11,
      question: "How many stores should an application typically have?",
      description: null,
      answers: {
        a: "One per reducer",
        b: "One",
        c: "One per component",
        d: "As many as needed",
      },
      correct_answer: "b",
      explanation: "Best practice is to use a single Redux store for your entire application.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 12,
      question: "What middleware is commonly used with Redux for async actions?",
      description: null,
      answers: {
        a: "Redux-DevTools",
        b: "React-Router",
        c: "Redux Thunk",
        d: "Immer",
      },
      correct_answer: "c",
      explanation: "`redux-thunk` allows writing action creators that return functions (for async logic).",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 13,
      question: "Which library provides hooks like `useDispatch` and `useSelector`?",
      description: null,
      answers: {
        a: "react-redux",
        b: "redux",
        c: "redux-thunk",
        d: "react",
      },
      correct_answer: "a",
      explanation: "`react-redux` provides the bindings and hooks for integrating Redux with React.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 14,
      question: "What does `createSlice` do in Redux Toolkit?",
      description: null,
      answers: {
        a: "Creates a router slice",
        b: "Creates a reducer and actions automatically",
        c: "Combines all reducers",
        d: "Fetches API data",
      },
      correct_answer: "b",
      explanation: "`createSlice` automatically generates action creators and reducer logic based on state slices.",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 15,
      question: "Redux state should be:",
      description: null,
      answers: {
        a: "Mutable",
        b: "Nested deeply",
        c: "Immutable",
        d: "Stored in localStorage only",
      },
      correct_answer: "c",
      explanation: "Redux state must be treated as immutable to prevent side effects and bugs.",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 16,
      question: "Which of these is NOT a valid Redux middleware?",
      description: null,
      answers: {
        a: "redux-saga",
        b: "redux-thunk",
        c: "redux-logger",
        d: "redux-style",
      },
      correct_answer: "d",
      explanation: "`redux-style` is not a valid middleware; the others are commonly used.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 17,
      question: "Redux is most useful when:",
      description: null,
      answers: {
        a: "Your app has simple state",
        b: "You need to manage complex global state",
        c: "You only use static pages",
        d: "You have no interactions",
      },
      correct_answer: "b",
      explanation: "Redux shines in managing complex state shared across many parts of the app.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 18,
      question: "What is the correct order of Redux data flow?",
      description: null,
      answers: {
        a: "View → Store → Action → Reducer",
        b: "Action → Store → Reducer → View",
        c: "Action → Reducer → Store → View",
        d: "View → Action → Reducer → Store",
      },
      correct_answer: "d",
      explanation: "In Redux, the flow is: View → Action → Reducer → Store → View (update).",
      difficulty: "Hard",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 19,
      question: "What does `configureStore` from Redux Toolkit do?",
      description: null,
      answers: {
        a: "Creates a reducer",
        b: "Generates action creators",
        c: "Sets up a store with good defaults",
        d: "Connects a store to a database",
      },
      correct_answer: "c",
      explanation: "`configureStore` sets up a Redux store with recommended defaults like devtools and thunk.",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 20,
      question: "What is an action creator in Redux?",
      description: null,
      answers: {
        a: "A component that manages styles",
        b: "A function that returns an action object",
        c: "A reducer",
        d: "A thunk function",
      },
      correct_answer: "b",
      explanation: "Action creators are functions that return plain action objects.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 21,
      question: "What is the use of `createAsyncThunk`?",
      description: null,
      answers: {
        a: "To handle routing",
        b: "To create reducers",
        c: "To handle async logic like API calls",
        d: "To update CSS styles",
      },
      correct_answer: "c",
      explanation: "`createAsyncThunk` handles async operations like fetching data and dispatches lifecycle actions.",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 22,
      question: "What is an initial state in Redux?",
      description: null,
      answers: {
        a: "The state passed to combineReducers",
        b: "The state passed before store creation",
        c: "The default value a reducer returns before any action",
        d: "The final state after all reducers run",
      },
      correct_answer: "c",
      explanation: "Reducers should return an initial state when no state is provided.",
      difficulty: "Medium",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 23,
      question: "Redux Toolkit is:",
      description: null,
      answers: {
        a: "An alternative to Redux",
        b: "A UI library",
        c: "A library that simplifies Redux setup",
        d: "A debugging tool",
      },
      correct_answer: "c",
      explanation: "Redux Toolkit simplifies Redux usage with utilities like `createSlice` and `configureStore`.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    },
    {
      id: 24,
      question: "Which hook replaces `mapStateToProps`?",
      description: null,
      answers: {
        a: "useEffect",
        b: "useSelector",
        c: "useReducer",
        d: "useStore",
      },
      correct_answer: "b",
      explanation: "`useSelector` replaces `mapStateToProps` by directly accessing Redux store state.",
      difficulty: "Easy",
      category: "Redux",
      multiple_correct: false,
    }
  ];
  